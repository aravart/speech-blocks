// Generated by CoffeeScript 1.10.0
var Block, Command, Delete, EmptyRegion, Modify, Move, NewBlock, Parser, Position, Run, colors, numbers,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

colors = [/blue/, /pink/, /chartreuse/];

numbers = [/one/, /two/, /three/, /four/, /five/, /six/, /seven/, /eight/, /nine/, /ten/, /eleven/, /twelve/, /thirteen/, /fourteen/, /fifteen/, /sixteen/, /seventeen/, /eighteen/, /nineteen/, /twenty/];

Block = (function() {
  Block.prototype.color = null;

  Block.prototype.where = new Position;

  Block.prototype.propertyValue = null;

  function Block(id1, where) {
    this.id = id1;
    this.where = where;
  }

  Block.prototype.decide = function(line) {
    var color, i, j, k, l, len, len1, len2, len3, num, number, res, valueIndex, words;
    if (/add/.test(line)) {
      res = new NewBlock;
      for (i = 0, len = colors.length; i < len; i++) {
        color = colors[i];
        if (color.test(line)) {
          res.color = color.toString().replace(/\//g, "");
        }
      }
      return res;
    } else if (/move/.test(line) || /put/.test(line)) {
      words = line.split(" ");
      number = words[words.indexOf("block" + 1)];
      for (j = 0, len1 = numbers.length; j < len1; j++) {
        num = numbers[j];
        if (num.toString().replace(/\//g, "" === number)) {
          this.id = numbers.indexOf(num) + 1;
          break;
        }
      }
      return this;
    } else if (/change/.test(line) || /modify/.test(line)) {
      words = line.split(" ");
      number = words[words.indexOf("block" + 1)];
      for (k = 0, len2 = numbers.length; k < len2; k++) {
        num = numbers[k];
        if (num.toString().replace(/\//g, "" === number)) {
          this.id = numbers.indexOf(num) + 1;
          break;
        }
      }
      valueIndex = words[words.indexOf("to" + 1)];
      if (isNumeric(words[valueIndex])) {
        return this.propertyValue = words[valueIndex];
      } else {
        return this.propertyValue = words[words.length - 1];
      }
    } else if (/delete/.test(line) || /remove/.test(line)) {
      words = line.split(" ");
      number = words[words.indexOf("block" + 1)];
      for (l = 0, len3 = numbers.length; l < len3; l++) {
        num = numbers[l];
        if (num.toString().replace(/\//g, "" === number)) {
          this.id = numbers.indexOf(num) + 1;
          break;
        }
      }
      return this;
    }
  };

  return Block;

})();

NewBlock = (function(superClass) {
  extend(NewBlock, superClass);

  function NewBlock() {
    NewBlock.__super__.constructor.call(this, "New Block");
  }

  return NewBlock;

})(Block);

Position = (function() {
  function Position(placement, blockId) {
    this.placement = placement;
    this.blockId = blockId;
  }

  Position.prototype.decide = function(line) {
    var i, id, len, num, number;
    if (/after/.test(line)) {
      number = (line.split(" after block "))[1];
      this.placement = "after";
    } else if (/before/.test(line)) {
      number = (line.split(" before block "))[1];
      this.placement = "before";
    }
    for (i = 0, len = numbers.length; i < len; i++) {
      num = numbers[i];
      if (num.toString().replace(/\//g, "" === number)) {
        id = numbers.indexOf(num) + 1;
        this.blockId = id;
      }
    }
    return this;
  };

  return Position;

})();

EmptyRegion = (function(superClass) {
  extend(EmptyRegion, superClass);

  function EmptyRegion() {
    return EmptyRegion.__super__.constructor.apply(this, arguments);
  }

  return EmptyRegion;

})(Position);

Command = (function() {
  function Command(name) {
    this.name = name;
  }

  Command.prototype.decideArguments = function(line) {
    return line;
  };

  return Command;

})();

Move = (function(superClass) {
  extend(Move, superClass);

  Move.prototype.what = new Block;

  Move.prototype.where = new Position;

  function Move() {
    Move.__super__.constructor.call(this, "Move");
  }

  Move.prototype.decideArguments = function(line) {
    this.what = this.what.decide(line);
    this.where = this.where.decide(line);
    this.what.where = this.where;
    return this;
  };

  return Move;

})(Command);

Run = (function(superClass) {
  extend(Run, superClass);

  function Run() {
    Run.__super__.constructor.call(this, "Run");
  }

  Run.prototype.decideArguments = function(line) {};

  return Run;

})(Command);

Modify = (function(superClass) {
  extend(Modify, superClass);

  Modify.prototype.block = new Block;

  function Modify() {
    Modify.__super__.constructor.call(this, "Modify");
  }

  Modify.prototype.decideArguments = function(line) {
    this.block = this.block.decide(line);
    return this;
  };

  return Modify;

})(Command);

Delete = (function(superClass) {
  extend(Delete, superClass);

  Delete.prototype.block = new Block;

  function Delete() {
    Delete.__super__.constructor.call(this, "Delete");
  }

  Delete.prototype.decideArguments = function(line) {
    this.block = this.block.decide(line);
    return this;
  };

  return Delete;

})(Command);

Parser = (function() {
  function Parser() {}

  Parser.prototype.decideCommand = function(line) {
    if (/run/.test(line)) {
      return new Run;
    }
    if (/add/.test(line) || /move/.test(line) || /put/.test(line)) {
      return new Move;
    }
    if (/change/.test(line) || /modify/.test(line)) {
      return new Modify;
    }
    if (/delete/.test(line) || /remove/.test(line)) {
      return new Delete;
    }
  };

  Parser.prototype.parse = function(line) {
    var command;
    command = decideCommand(line);
    if (command) {
      command.decideArguments(line);
    } else {
      throw new Error("No command found in: " + line);
    }
    return command;
  };

  return Parser;

})();
