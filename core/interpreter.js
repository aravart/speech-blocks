// Generated by CoffeeScript 1.10.0
'use strict';


goog.provide('SpeechBlocks.Interpreter');

goog.require('goog.structs.Map');

var blockTypeMap = new goog.structs.Map();

SpeechBlocks.Interpreter = function(controller) {
  this.controller = controller;
  this.id = 1;
  SpeechBlocks.Interpreter.createBlockTypeMap();
}

SpeechBlocks.Interpreter.createBlockTypeMap = function() {
  blockTypeMap.set('if','controls_if');
  blockTypeMap.set('comparison','logic_compare');
  blockTypeMap.set('repeat','controls_repeat_ext');
  blockTypeMap.set('number','math_number');
  blockTypeMap.set('arithmetic','math_arithmetic');
  blockTypeMap.set('text','text');
  blockTypeMap.set('print','text_print');
  blockTypeMap.set('set','variables_set');
  blockTypeMap.set('variable','variables_get');
}


SpeechBlocks.Interpreter.prototype.interpret = function(command) {
  if (command.action == "run") {
    this.run(command);
  } else if (command.action == "add") {
    this.addBlock(command);
  } else if (command.action == "move") {
    this.moveBlock(command);
  } else if (command.action == "modify") {
    this.modifyBlock(command);
  } else if (command.action == "delete") {
    this.deleteBlock(command);
  }
  else {
    console.log("NO COMMAND FOUND");
  }
};

SpeechBlocks.Interpreter.prototype.run = function(command) {
  Blockly.JavaScript.addReservedWords('code');
  var code = Blockly.JavaScript.workspaceToCode(this.controller.workspace);
  try {
    eval(code);
  } catch (e) {
    alert(e);
  }
};

SpeechBlocks.Interpreter.prototype.addBlock = function(command) {
  controller.addBlock(blockTypeMap.get(command.type), this.id++, new SpeechBlocks.Translation(0,0));
};

SpeechBlocks.Interpreter.prototype.moveBlock = function(command) {
  controller.moveBlock(command.block.number, command.where);
};

SpeechBlocks.Interpreter.prototype.modifyBlock = function(command) {};

SpeechBlocks.Interpreter.prototype.deleteBlock = function(command) {
  controller.removeBlock(command.block.number);
};
